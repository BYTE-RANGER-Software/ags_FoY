function set_options()
{
/***********************************************************************
 * Setup all the template options
 ***********************************************************************/
 
  // Default template Language, currently supported languages: 
  //   eLangEN (English), eLangDE (German), eLangES (Spanish), eLangFR (French)
  //   eLangIT (Italian), eLangPT (Portuguese), eLangNL (Dutch)  
  Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangEN;
  
  // colour used in action bar
  Verbs.VerbGuiOptions[eVerbGuiActionLabelColorNormal] = 52959;
  
  // highlighted colour used in action bar
  Verbs.VerbGuiOptions[eVerbGuiActionLabelColorHighlighted] = 24188;
  
  // sprite slot of the upper inv arrow / normal
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowONsprite]  = 55;

  // sprite slot of the upper inv arrow / disabled
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowOFFsprite] = 52;
  
  // sprite slot of the upper inv arrow / highlighted
  Verbs.VerbGuiOptions[eVerbGuiInvUparrowHIsprite]  = 57;
  
  // sprite slot of the lower inv arrow / normal
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowONsprite]  = 56;
  
  // sprite slot of the lower inv arrow / disabled
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowOFFsprite] = 53;
  
  // sprite slot of the lower inv arrow / highlighted
  Verbs.VerbGuiOptions[eVerbGuiInvDownarrowHIsprite]  = 58;
  
  // offset used by WalkOffScreen and exit extensions
  Verbs.VerbGuiOptions[eVerbGuiWalkOffScreenOffset] = 30;
  
  // walk to character before starting interaction
  Verbs.VerbGuiOptions[eVerbGuiApproachCharInteract] = true;
  
  // Non playable characters are facing the player before talk-to and give-to
  Verbs.VerbGuiOptions[eVerbGuiNPCfacingPlayer] = false;
  
  // Enable Talk to Objects and Hotspots
  Verbs.VerbGuiOptions[eVerbGuiObjHotTalk] = true;
  
  // turned on: right-click on inv items is lookat, left-click is use
  // all other extensions will be ignored
  Verbs.VerbGuiOptions[eVerbGuiClassicInvHandling] = true;
  
  // action bar is fixed like in classic SCUMM games among other things
  Verbs.VerbGuiOptions[eVerbGuiClassicGui] = false;
  
  // Doubleclick on open doors changes room instantly
  Verbs.VerbGuiOptions[eVerbGuiExitDoorDoubleclick] = true;
  
  // Doubleclick on anything with an exit extension
  Verbs.VerbGuiOptions[eVerbGuiExitExtensionDoubleclick] = true;
  
  // Character speed is doubled on doubleclick
  Verbs.VerbGuiOptions[eVerbGuiRunOnDoubleClick] = true;
  
  // Distance between mouse cursor and player until running begins
  Verbs.VerbGuiOptions[eVerbGuiRunCursorDistance] = 10;
  
  // multiplied to the player movement speed, while running
  // 1 = no speedup at all, 2 = double speed and so on
  Verbs.VerbGuiOptions[eVerbGuiRunSpeedupRate] = 2; 
  
  
/***********************************************************************
 * Setup unhandled event messages 
 * %s is a placeholder for the location (characters, hotspots etc.)
 ***********************************************************************/
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledUse]      = "I can't use that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledUseInv]   = "That won't do any good.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledLook]     = "Nice %s"; 
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledLookChar] = "It's %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPush]     = "I can't push that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPushChar] = "I can't push %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPull]     = "I can't pull that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPullChar] = "I can't pull %s";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledCloseDoor]  = "It has already been closed.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledCloseChar]  = "Doing that with %s is not a good idea.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledClose]    = "I can't close that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpenDoor] = "It is open.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpenChar] = "%s would not like it.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledOpen]     = "I can't open that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPickup]   = "I don't need that.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledPickupChar] = "I don't want to pick %s up.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledTalkTo]     = "I have nothing to say.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledTalkToChar] = "I don't want to talk to %s.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledGive]     = "I'd rather keep it.";
  Verbs.VerbGuiUnhandled[eVerbGuiUnhandledDefault]  = "I can't do that.";
  
  
/***********************************************************************
 * Setup default door strings 
 ***********************************************************************/
 
  Doors.SetDoorStrings("The door looks solid.",
                        "It is locked.",
                        "I can't unlock it with that.",
                        "I have to close it first.",
                        "Now it's unlocked.",
                        "The door is locked again."
                      );

}

/***********************************************************************
 * game_start()
 * 
 ***********************************************************************/
function game_start()
{
  set_options();
  String tr_lang;
  // --- translate GUI action buttons ---
  tr_lang = GetTranslation("GUI_LANGUAGE");
  tr_lang = tr_lang.LowerCase();
  
  if (tr_lang == "de") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangDE;
  }
  else if (tr_lang =="es") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangES;
  }
  else if (tr_lang =="fr") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangFR;
  }  
  else if (tr_lang =="en") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangEN;
  }
  else if (tr_lang =="it") {
    Verbs.VerbGuiOptions[eVerbGuiTemplateLanguage] = eLangIT;
  }     
  Verbs.InitGuiLanguage();
  Verbs.AdjustGUIText();
  
  Verbs.AdjustActionBarPosition();

  Verbs.SetDefaultAction(eGA_WalkTo);    
  Verbs.HandleInvArrows();
  
}
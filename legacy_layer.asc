// Legacy Layer
// 
// This module provides the old functions from the 9-Verb MI-Style template.
//
// Remove the commented blocks below only, if you are upgrading your game from the 9-Verb MI-Style template
// and need the old function calls.
// If you start a new game, it is save to delete this module.




/*
int GStopsaveitem = 0;    // top savegame element of the save GUI
int listBoxGap;           // used in the save-game dialog to determine a list-item's height
String numbers;           // used by getInteger() to convert strings

function set_door_state(int door_id, int value) {
  Doors.SetDoorState(door_id,  value);
}

int get_door_state(int door_id) {
  
  return Doors.GetDoorState(door_id);
}

function init_object (int door_id, int obj){
  Doors.InitObject(door_id, obj);
}

int Absolute(int value) {
  if (value<0) return -value;
  return value;
}

int Offset(int point1, int point2) {
  return Absolute(point1 - point2);
}

int getButtonAction(int action) {
  Verbs.GetButtonAction(action);
}

function disable_gui()
{
  Verbs.DisableGui();
}

function enable_gui()
{
  Verbs.EnableGui();
}

bool is_gui_disabled() {
  return Verbs.IsGuiDisabled();
}

function set_double_click_speed(int speed){
  Verbs.SetDoubleClickSpeed(speed);
}

function TranslateAction(int action, int tr_lang) {
  Verbs.TranslateAction(action, tr_lang);
}

bool isAction(Action test_action) {
  return Verbs.IsAction(test_action);
}

function UsedAction(Action test_action) {
  return Verbs.UsedAction(test_action);
}

function SetAction(Action new_action) {
  Verbs.SetAction(new_action);
}

function SetDefaultAction(Action def_action) {
  Verbs.SetDefaultAction(def_action);
}

int GlobalCondition(eGlobCond condition) {
  return Verbs.GlobalCondition(condition);
}

char ExtensionEx(int index, String name){
  return Verbs.ExtensionEx(index, name);
}

char Extension() {
  return Verbs.Extension();
}

function RemoveExtension(){
  return Verbs.RemoveExtension();
}

function AddExtension(char extension) {
  Verbs.AddExtension(extension);
}

function SetAlternativeAction(char extension, Action alt_action) {
  Verbs.SetAlternativeAction(extension, alt_action);
}

function OpenCloseExtension(int door_id) {
  Verbs.OpenCloseExtension(door_id);
}

function VariableExtensions() {
  Verbs.VariableExtensions();
}

function CheckDefaultAction() {
  Verbs.CheckDefaultAction();
}

function UpdateActionBar() {
  Verbs.UpdateActionBar();
}

String clearToSpace(String text) {
  int p=0;
  // ignore white spaces at the beginning
  while (p<text.Length && text.Chars[p]==' ') {
    p++;
  }
  // write white spaces until next white space
  while (p<text.Length && text.Chars[p]!=' ') {
    text=text.ReplaceCharAt(p, ' ');
    p++;
  }
  return text;
}

int getInteger() {
  int r=numbers.AsInt;
  numbers=clearToSpace(numbers);
  return r;
}

function SetActionButtons(Action action, String button_definition) {
  // extract data from button_definition
  String bd;
  
  char key;
  if (IsTranslationAvailable ())
    bd=GetTranslation(button_definition);
  else {
    bd=button_definition;
  }
  
  bd=clearToSpace(bd);
  numbers=bd;
  int btn_id    = getInteger();
  int sprite    = getInteger();
  int sprite_hi = getInteger();
  bd=numbers;
  key = bd.Chars[bd.Length-1];
  Verbs.SetActionButtons(action, btn_id, sprite, sprite_hi, key) ;
}

function AdjustLanguage() {
  Verbs.AdjustLanguage();
}

function AdjustGUIText() {
  Verbs.AdjustGUIText();
}

function InitGuiLanguage() {
  Verbs.InitGuiLanguage();
}

function freeze_player(){
  Verbs.FreezePlayer();
}

function unfreeze_player(){
  Verbs.UnfreezePlayer();
}

function SetPlayer(Character*ch) {
  Verbs.SetPlayer(ch);
}

int MovePlayerEx(int x, int y, WalkWhere direct) {
  return Verbs.MovePlayerEx(x, y, direct);
}

int MovePlayer(int x, int y) {
  return Verbs.MovePlayer(x, y);
}

int GoToCharacterEx(Character*chwhogoes, Character*ch, CharacterDirection dir, int xoffset, int yoffset, bool NPCfacesplayer, int blocking) {
  return Verbs.GoToCharacterEx(chwhogoes, ch, dir, xoffset, yoffset, NPCfacesplayer, blocking);
}

int NPCGoToCharacter(Character*chwhogoes, Character*chtogoto, CharacterDirection dir, bool NPCfacesplayer, int blocking) {
  return Verbs.NPCGoToCharacter(chwhogoes, chtogoto, dir, NPCfacesplayer, blocking);
}

int GoToCharacter(Character*ch, CharacterDirection dir, bool NPCfacesplayer, int blocking) {
  return Verbs.GoToCharacter(ch, dir, NPCfacesplayer, blocking);
}

function GoTo(int blocking) {
  return Verbs.GoTo(blocking);
}

function Go() {
  return Verbs.GoTo(2);
}

function set_approaching_char(bool enable){
  Verbs.SetApproachingChar(enable);
}

function WalkOffScreen(){
  Verbs.WalkOffScreen();
}

function Unhandled(int door_script) {
  Verbs.Unhandled(door_script);
}

function any_click_move (int x, int y, CharacterDirection dir) {
  return Verbs.AnyClickMove(x, y, dir);
}

function any_click_walk(int x, int y, CharacterDirection dir){
  return Verbs.AnyClickWalk(x, y, dir);
}

function any_click_walk_look(int x, int y, CharacterDirection dir, String lookat){
  return Verbs.AnyClickWalkLook(x, y, dir, lookat);
}

function any_click_use_inv(InventoryItem*iitem, int x, int y, CharacterDirection dir) {
  return Verbs.AnyClickUseInv(iitem, x, y, dir);

}

function any_click_walk_look_pick(int x, int y, CharacterDirection dir, String lookat, int obj, InventoryItem *iitem, AudioClip *sound) {
  return Verbs.AnyClickWalkLookPick(x, y, dir, lookat, obj, iitem, sound);
}

function set_door_strings(String lookat, String islocked, String wrongitem, String closefirst, String unlock, String relock) {
  Doors.SetDoorStrings(lookat, islocked, wrongitem, closefirst, unlock, relock);
}

String get_door_strings(String what_type) {
  return Doors.GetDoorStrings(what_type);
}

function any_click_on_door_special(int door_id, int obj, int x, int y, CharacterDirection dir, int nr_room, int nr_x, int nr_y, CharacterDirection nr_dir, AudioClip *opensound, AudioClip *closesound, int key, int closevalue) {
  return Doors.AnyClickSpecial(door_id, obj, x, y, dir, nr_room, nr_x, nr_y, nr_dir, opensound, closesound, key, closevalue);
}

function any_click_on_door(int door_id, int obj, int x, int y, CharacterDirection dir, int nr_room, int nr_x, int nr_y, CharacterDirection nr_dir) {
  return Doors.AnyClickSpecial(door_id, obj, x, y, dir, nr_room, nr_x, nr_y, nr_dir, null, null, 0, 0);
}

*/

/*
function GetLucasSavegameListBox(ListBox*lb) {
  // stores savegames in slots 100-199
  String buffer, sgdesc;
  int maxsavegames, counter=0;
  maxsavegames=99;
  lb.Clear();
  while (counter<maxsavegames) {
    buffer=String.Format("%d.", counter+1);
    sgdesc=Game.GetSaveSlotDescription(counter+100);
    if (sgdesc==null) sgdesc="";
    buffer=buffer.Append(sgdesc);
    lb.AddItem(buffer);
    counter++;
  }
  lb.TopItem=GStopsaveitem;
  lb.SelectedIndex=-1;
}
*/

/*
export GStopsaveitem;
export listBoxGap;
*/
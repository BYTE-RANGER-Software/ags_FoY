// Save Load GUI functionality

int slotSprite;
int slotSpriteHi;

DynamicSprite *saveScreenshot;  
DynamicSprite *slotSprites[SAVE_SLOTS];  
DynamicSprite *slotSprites_hi[SAVE_SLOTS]; 
DynamicSprite *old_slotSprites[SAVE_SLOTS];
DynamicSprite *old_slotSprites_hi[SAVE_SLOTS];

int saveSlotId;
int loadSlotId;
String saveSlotString;
int playTimeSeconds;

Button  *saveSlotButtons[SAVE_SLOTS];
Button  *loadSlotButtons[SAVE_SLOTS];

bool save_scheduled;

int timeNow;
int timeThen;
DateTime *dt;

void set_slotSprite(static OptionGui, int value)
{
  slotSprite = value;
}

int get_slotSprite(static OptionGui)
{
  return slotSprite;
}

void set_slotSpriteHi(static OptionGui, int value)
{
  slotSpriteHi = value;
}

int get_slotSpriteHi(static OptionGui)
{
  return slotSpriteHi;
}

// InitSaveDialog
static void OptionGui::InitSaveDialog() {
  int i = 0;
  
  while (i < SAVE_SLOTS) {
    saveSlotButtons[i] = gSave.Controls[i+1].AsButton;
    i++;
  }   
}


// DisableSaveButtons
static void OptionGui::DisableSaveButtons() {
  int i = 0;
  while (i < SAVE_SLOTS) {
    if (i+1 != saveSlotId) {
      saveSlotButtons[i].Enabled=false;
    }
    i++;
  }
  btnSaveCancel.Enabled = false;
}

// EnableSaveButtons
static void OptionGui::EnableSaveButtons() {
  int i;
  while (i < SAVE_SLOTS) {
    saveSlotButtons[i].Enabled=true;
    i++;
  }  
  btnSaveCancel.Enabled = true;
}

// Show the Save dialog
static void OptionGui::ShowSaveDialog() {
  if (!save_scheduled) {
    OptionGui.InitSaveDialog();
    
    int i=0;
    int btnHeight = Game.SpriteHeight[slotSprite];
    int btnWidth  = Game.SpriteWidth[slotSprite];
    String tempSlotDesc = "";
    // Check the slots
    while (i < SAVE_SLOTS) {
      
      slotSprites[i] = DynamicSprite.Create(btnWidth, btnHeight);
      slotSprites_hi[i] = DynamicSprite.Create(btnWidth, btnHeight);
      
      DrawingSurface *normGraphic= slotSprites[i].GetDrawingSurface();
      DrawingSurface *hiGraphic= slotSprites_hi[i].GetDrawingSurface();
      
      normGraphic.DrawImage(0, 0, slotSprite);
      hiGraphic.DrawImage(0, 0, slotSpriteHi);
      
      if (Game.GetSaveSlotDescription(i+1)!=null) {
        DynamicSprite *tempSprite = DynamicSprite.CreateFromSaveGame(i+1, System.ScreenWidth, System.ScreenHeight);
        if (tempSprite != null) {
          tempSprite.Crop(0, 0, System.ScreenWidth, System.ScreenHeight - gMain.Height);
          tempSprite.Resize(btnWidth-4, btnHeight-6);
          
          DrawingSurface *tempSurf = tempSprite.GetDrawingSurface();
          tempSurf.DrawingColor = 15;
          tempSlotDesc = Game.GetSaveSlotDescription(i+1);
          if (tempSlotDesc != null && tempSlotDesc.IndexOf(";") > 0) {
            tempSurf.DrawString(0, 1, eFontTiny, tempSlotDesc.Substring(0, tempSlotDesc.IndexOf(";")));
            tempSurf.DrawString(0, btnHeight-15, eFontTiny, tempSlotDesc.Substring(tempSlotDesc.IndexOf(";")+1, tempSlotDesc.Length));
          }
          tempSurf.Release();
        }
        else {
          tempSprite = DynamicSprite.Create(btnWidth-4, btnHeight-6);
          DrawingSurface *tempSurf = tempSprite.GetDrawingSurface();
          tempSurf.Clear(0);
          tempSurf.DrawingColor = 15;
          tempSlotDesc = Game.GetSaveSlotDescription(i+1);
          if (tempSlotDesc != null && tempSlotDesc.IndexOf(";") > 0) {
            tempSurf.DrawString(0, 1, eFontTiny, tempSlotDesc.Substring(0, tempSlotDesc.IndexOf(";")));
            tempSurf.DrawString(0, btnHeight-15, eFontTiny, tempSlotDesc.Substring(tempSlotDesc.IndexOf(";")+1, tempSlotDesc.Length));
          }
          tempSurf.Release();        
          
        }
        normGraphic.DrawImage(2, 3, tempSprite.Graphic);
        hiGraphic.DrawImage(2, 3, tempSprite.Graphic);
        tempSprite.Delete();
      }
      normGraphic.Release();
      hiGraphic.Release();

      saveSlotButtons[i].NormalGraphic=slotSprites[i].Graphic;
      saveSlotButtons[i].MouseOverGraphic=slotSprites_hi[i].Graphic;
      i++;
    }
    gSave.Visible=true;
    gOptions.Visible = false;
  }
}


// clicked on a save slot
static void OptionGui::SelectSaveSlot(int control_id) 
{
  int btnWidth  = Game.SpriteWidth[saveSlotButtons[0].Graphic];
  int btnHeight = Game.SpriteHeight[saveSlotButtons[0].Graphic];  
  
  int slot;
  int i;
  
  while (i < SAVE_SLOTS) {
    if (control_id == saveSlotButtons[i].ID) slot = i+1;    
    i++;
  }
  
  // backup old setting in case of cancel
  old_slotSprites[slot-1] = DynamicSprite.CreateFromExistingSprite(saveSlotButtons[slot-1].NormalGraphic);
  old_slotSprites_hi[slot-1] = DynamicSprite.CreateFromExistingSprite(saveSlotButtons[slot-1].MouseOverGraphic);
  
  // Create new sprites
  slotSprites[slot-1] = DynamicSprite.Create(btnWidth, btnHeight);
  slotSprites_hi[slot-1] = DynamicSprite.Create(btnWidth, btnHeight);
  
  DrawingSurface *normGraphic= slotSprites[slot-1].GetDrawingSurface();
  DrawingSurface *hiGraphic= slotSprites_hi[slot-1].GetDrawingSurface();
  
  normGraphic.DrawImage(0, 0, slotSprite);
  hiGraphic.DrawImage(0, 0, slotSpriteHi);
  
  if(saveScreenshot != null) {
    normGraphic.DrawImage(2, 3, saveScreenshot.Graphic);
    hiGraphic.DrawImage(2, 3, saveScreenshot.Graphic);
  }

  // pass these to Okay and Cancel
  saveSlotId = slot;
  
  saveSlotButtons[slot-1].NormalGraphic=slotSprites[slot-1].Graphic;
  saveSlotButtons[slot-1].MouseOverGraphic=slotSprites_hi[slot-1].Graphic;  
  normGraphic.Release();
  hiGraphic.Release();
  
  // Show Confirm
  
  btnSaveOk.X = saveSlotButtons[slot-1].X+saveSlotButtons[slot-1].Width-7;
  btnSaveOk.Y = saveSlotButtons[slot-1].Y + 4;
  btnSaveNo.X = btnSaveOk.X;
  btnSaveNo.Y = btnSaveOk.Y + btnSaveOk.Height;
  OptionGui.DisableSaveButtons();
  gSaveConfirm.Visible=true;    

}


// Red Button clicked: don't save
static void OptionGui::SaveNo()
{
  int slot = saveSlotId;
  saveSlotButtons[slot-1].NormalGraphic=old_slotSprites[slot-1].Graphic;
  saveSlotButtons[slot-1].MouseOverGraphic=old_slotSprites_hi[slot-1].Graphic;
  gSaveConfirm.Visible=false;
  OptionGui.EnableSaveButtons();
}

// Green Button clicked: Okay
static void OptionGui::SaveYes()
{
  int slot = saveSlotId;
  int i;
  
  if (gSaveConfirm.Visible==true) gSaveConfirm.Visible=false;
  gSave.Visible=false;
  gOptions.Visible = false;
  save_scheduled = true;
  if (saveScreenshot != null) saveScreenshot.Delete();
  
  while (i < SAVE_SLOTS) {
    if (old_slotSprites[i]!=null) old_slotSprites[i].Delete();
    if (old_slotSprites_hi[i]!=null) old_slotSprites_hi[i].Delete();
    if (slotSprites[i]!=null) slotSprites[i].Delete();
    if (slotSprites_hi[i]!=null) slotSprites_hi[i].Delete();    
    i++;
  }
 
  OptionGui.EnableSaveButtons();
  
}

// Close Save GUI
static void OptionGui::SaveCancel()
{
  int i;
  saveSlotId = 0;
  saveSlotString = "";
  if (gSaveConfirm.Visible==true) {
    gSaveConfirm.Visible=false;
  }
  gSave.Visible=false;
  gOptions.Visible = true;
}


static void OptionGui::InitLoadDialog() 
{
  int i = 0;
  
  while (i < SAVE_SLOTS) {
    loadSlotButtons[i] = gLoad.Controls[i+1].AsButton;
    i++;
  }    
}


// Display load dialog
static void OptionGui::ShowLoadDialog() {
  if (!save_scheduled) {
    int i=0;
    int btnHeight = Game.SpriteHeight[slotSprite];
    int btnWidth  = Game.SpriteWidth[slotSprite];
    
    String tempSlotDesc;
    OptionGui.InitLoadDialog();
    
    // Check the slots
    while (i < SAVE_SLOTS) {
      
      loadSlotButtons[i].Enabled=false;
      slotSprites[i] = DynamicSprite.Create(btnWidth, btnHeight);
      slotSprites_hi[i] = DynamicSprite.Create(btnWidth, btnHeight);
      
      DrawingSurface *normGraphic= slotSprites[i].GetDrawingSurface();
      DrawingSurface *hiGraphic= slotSprites_hi[i].GetDrawingSurface();
      
      normGraphic.DrawImage(0, 0, slotSprite);
      hiGraphic.DrawImage(0, 0, slotSpriteHi);
      
      if (Game.GetSaveSlotDescription(i+1)!=null) {
        DynamicSprite *tempSprite = DynamicSprite.CreateFromSaveGame(i+1, System.ScreenWidth, System.ScreenHeight);
        if (tempSprite != null) {
          tempSprite.Crop(0, 0, System.ScreenWidth, System.ScreenHeight - gMain.Height);
          tempSprite.Resize(btnWidth-4, btnHeight-6);
          
          DrawingSurface *tempSurf = tempSprite.GetDrawingSurface();
          tempSurf.DrawingColor = 15;
          tempSlotDesc = Game.GetSaveSlotDescription(i+1);
          if (tempSlotDesc != null && tempSlotDesc.IndexOf(";") > 0) {
            tempSurf.DrawString(0, 1, eFontTiny, tempSlotDesc.Substring(0, tempSlotDesc.IndexOf(";")));
            tempSurf.DrawString(0, btnHeight-15, eFontTiny, tempSlotDesc.Substring(tempSlotDesc.IndexOf(";")+1, tempSlotDesc.Length));
          }
          
          tempSurf.Release();
        }
        else {
          tempSprite = DynamicSprite.Create(btnWidth-4, btnHeight-6);
          DrawingSurface *tempSurf = tempSprite.GetDrawingSurface();
          tempSurf.Clear(0);
          tempSurf.DrawingColor = 15;
          tempSlotDesc = Game.GetSaveSlotDescription(i+1);
          if (tempSlotDesc != null && tempSlotDesc.IndexOf(";") > 0) {
            tempSurf.DrawString(0, 1, eFontTiny, tempSlotDesc.Substring(0, tempSlotDesc.IndexOf(";")));
            tempSurf.DrawString(0, btnHeight-15, eFontTiny, tempSlotDesc.Substring(tempSlotDesc.IndexOf(";")+1, tempSlotDesc.Length));
          }
          tempSurf.Release();        
          
        }
        normGraphic.DrawImage(2, 3, tempSprite.Graphic);
        hiGraphic.DrawImage(2, 3, tempSprite.Graphic);
        tempSprite.Delete();
        loadSlotButtons[i].Enabled = true;
      
      }
      normGraphic.Release();
      hiGraphic.Release();

      loadSlotButtons[i].NormalGraphic=slotSprites[i].Graphic;
      loadSlotButtons[i].MouseOverGraphic=slotSprites_hi[i].Graphic;
      i++;
    }
    gLoad.Visible = true;
    gOptions.Visible = false;
  }
}

// click on a slot button
static void OptionGui::SelectLoadSlot(int control_id) 
{
  int slot;
  int i;
  
  while (i < SAVE_SLOTS) {
    if (control_id == loadSlotButtons[i].ID) slot = i+1;    
    i++;
  }
  if (slot > 0 ) {
    if (saveScreenshot!=null) saveScreenshot.Delete();
    while (i < SAVE_SLOTS) {
      if (slotSprites[i]!=null) slotSprites[i].Delete();
      if (slotSprites_hi[i]!=null) slotSprites_hi[i].Delete();    
      i++;
    }
    RestoreGameSlot(slot);
  }
}


// Cancel loading
static void OptionGui::LoadCancel() {
  gLoad.Visible=false;
  gOptions.Visible = true;
}


//  Prepare a screenshot
static void OptionGui::CreateScreenshot()
{

  String playTimeResult = "";
  
  int playMinutes = FloatToInt(IntToFloat(playTimeSeconds) / 60.0, eRoundDown); 
  int playHours = FloatToInt(IntToFloat(playTimeSeconds) / 3600.0, eRoundDown); 
  
  if (playHours == 0) playTimeResult = String.Format ("%dm", playMinutes);
  else playTimeResult = String.Format ("%dh %dm", playHours, playMinutes);
  
  saveSlotString = String.Format("%s;%04d/%02d/%02d %02d:%02d", playTimeResult, dt.Year, dt.Month, dt.DayOfMonth,  dt.Hour, dt.Minute);
  
  int btnWidth  = Game.SpriteWidth[slotSprite];
  int btnHeight = Game.SpriteHeight[slotSprite];  
  
  saveScreenshot = DynamicSprite.CreateFromScreenShot();
  
  saveScreenshot.Crop(0, 0,  System.ScreenWidth, System.ScreenHeight - gMain.Height);
  saveScreenshot.Resize(btnWidth-4, btnHeight-6);
  
  DrawingSurface *tempSurf = saveScreenshot.GetDrawingSurface();
  tempSurf.DrawingColor = 15;
  tempSurf.DrawString(0, 1, eFontTiny, saveSlotString.Substring(0, saveSlotString.IndexOf(";")));
  
  tempSurf.DrawString(0, btnHeight-15, eFontTiny, saveSlotString.Substring(saveSlotString.IndexOf(";")+1, saveSlotString.Length));
  tempSurf.Release();  
}

// Show control panel
static void OptionGui::ShowOptions() 
{
  if (!save_scheduled) {
    OptionGui.CreateScreenshot();
    gOptions.Visible = true;
  }
}


// Remember when the game was started
function game_start()
{
  dt = DateTime.Now;
  timeNow = dt.RawTime;
  timeThen = timeNow;
  playTimeSeconds = 0;
}

// workaround to take a savegame screenshot without the gui
function repeatedly_execute() 
{
  dt = DateTime.Now;
  timeNow = dt.RawTime;
  
  if (timeNow > timeThen) {
    timeThen = timeNow;
    playTimeSeconds ++;
  }
  
  if (save_scheduled) {
    SaveGameSlot(saveSlotId, saveSlotString);
    saveSlotId = 0;
    saveSlotString = "";       
    save_scheduled = false;
  }
}
